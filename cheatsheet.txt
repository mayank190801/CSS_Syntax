------------------------ CSS CHEATSHEET ------------------------
--- SELECTORS ---
- Rarely ID's should be used -- in css
- h1, h2  --- this applies to all h1 and h2
- h1 h2 --- this applies to all h2 inside h1
- classes help in giving us more freedom specifity -- (prefer more)
- * { }  -- selects all the elements 
- Works like a waterfall -- css basically works on inheritance + the last rule is applied 
- Not everything is inherited -- font rules are inherited, but so are border and all are not applied
- forms elements do not inherit font -- (font : inherit) specially alloted
- id > class > element (SPECIFITY)

--- COLORS ---
- background : blueviolet
- color : red
- color : rgba(0,0,0,1)
- color : #ffffff 
- coolor website for color palletes -- (color contrast checker)

--- UNITS  ---  
- always reset the settings for the win
- rem -- (root element font-size) ie. it basically compares with root level only 
- em -- (depend on the parent font-size tho)
- % -- (works in percentage)
- vh, vw -- (a lil complicated)
- font-size should be 'rem' based, rest all you can do with 'em' stuff
- margin: 3rem auto; -- (to center it horizontally)

--- BOX MODEL --- 
- margin 1.5em 2em 3em 4em; -- (TLBR - top left bottom right)
- border : 2px dashed red
- border-top : 2px dashed yellow
- border- right : 2px dashed green
- border-top-width, style, color more settings
- border : 2px outset red, and so on -- a lot of values are there
- outline : 5px solid purple  (it takes up no space brother)
- outline-offset : 5px (how far we want the offset from our borders)
- border-radius : 20px

--- TYPOGRAPHY  ---  
- text-decoration : underline, overline, line-through, none 
- font-size : inherit   ( for forms and stuff )
- text-transform : capitalize, lowercase, uppercase
- text-align : justify, right, left
- text-indent : 2em   (indents the first line)
- text- ( for looking up at more text properties )
- line-height : 1.5
- letter-spacing : 1em
- word-spacing : 2em
- font-weight : 400
- font-style : italic, oblique, normal
- font-family : serif, sans-serif, monospace, cursive, fantasy, Arial, Verdana, Times New Roman
- @import url() in your css only 

--- LINKS ---  
- text-decoration : none
- cursor : pointer, not-allowed (and so on)
- a:visited, a:hover, a:active (correct order matters a lot!) 
- a:focus (for blind people) can be combined with background-color (pretty cool)
- opacity : 0-1 (little bit of transparency when you move cursor over)

--- LIST STYLE ---  
- list-style-type : none, lower-alpha, georgian, decimal, 
decimal-leading-zero, disc, cirlce, upper-roman
- padding : 0
- text-align : center
- list-style-position : inside, outside (pretty crucial as well)
- list-style-image : url('../') (in png format would be great)
- ul li:nth-child(2)  (to target only that element in list)
- ::marker (for targetting the bullets and not text)
- content : "someting" (inside ::marker you can specify this)
- <ol start="3" reverse>  (some pretty cool stuff)
- <li value="2">g</li> (rarely used bruh)

--- PROJECT ---  
- li a { display : block }  (this is crazy feature, it lets me change the hover color for the entire block it is present it!!!)
- above is super cool learning

--- DISPLAY --- 
- block, inline, inline-block, none
- block is stacked on one another simply, inline is having the least properties
- inline-block is a hybrid of both the worlds! margin and shit works pretty well
- none removes it from the page!!!  how super cool is that

--- FLOAT ---   (didn't find it pretty cool)
- float : left, right or something so that text can wrap around it
- display : flow-root , if it is present inside some div or so 
- only used for wrapping text around image, simple as that 

--- COLUMNS ---  (nope)
- column-count : 4
- column-width : 250px
- column-rule : 3px solid #333
- column-gap : 3rem

--- Position ---  
- position : static  (default value)
- position : absolute (doesnt change anything) -- (you have to set values)
- position : absolute ,top : 0 -- and now it will change a lot of values
- basically absolute position looks for a (closest) relative parent, it not found it would go to DOM container simple 
- position : relative (to use absolute for children classes)
- If we change top and bottom for relative box, then it doesn't require for the parent to have position: relative , it will automaticallly be relative to it.
- position : fixed (just fixed!! No care about any relative box bruh!!!) 
- z-index : 1; (default value is 0, but if we give it higher value, it will be on top of other blocks)
- position : sticky (is umm it get sticks at some point of scrolling or something)
- Have to figure these out in much more depth for sure -- to get better at them
- scroll-behaviour - smooth  (PRETTY DOPE PROPERTY!!!!) - when you click links inside page, it will give a smooth little scroll to us for sure

--- Flex Box ---  
- display : flex --starting on the container box
- flex-direction : column, row, row-reverse, column-reverse -- for changing the main axis direction we can use this property
- justify-content : flex-start, flex-end, center, space-between, space-around, space-evenly  
- justify content basically works for the main axis, how we have to adjust based on that
- align-items : flex-start, flex-end, center, baseline (and many more to figure out s)
- baseline properties aligns the content of the boxes 
- align items basically works for the cross axis, both are pretty helpful if you think about it 
- flex-wrap : wrap, nowrap, wrap-reverse -- now inner boxes can go to next row and live inside there peacefully
- align-content : (all prop of justify-content) -- when the items are starting to wrap and go into mulitple rows, then it becomes content, and align-items won't work anymore, so use this bad boi
- gap : 1em -- gives some gap between boxes (more like margin maybe)
- flex-grow : 1 -- this is a child property and basically how it works is 
- So if there is some extra space left on the major axis, then that is divided among all the children on the basis of this property - (all can have flex grow 1 and 
-one can have flex grow 2, so it will take twice more extra space than anyone else)
- flex-shrink : 0/1 -- child property -- basically if 0, then no shrinkage, if 1 fastest shrinkage then others
- so there is what happens, sometimes a box have min and max width, so it shrinks according to space, that's when above property can come handy
- flex-basis : 300px -- child propery -- you can set the width and override the one set before 
- align-self : center, flex-start, flex-end, baseline -- overriding the align properties of container
- order : -1 (default value - 0)-- child property -- changing the order in which they appear! (simple as that) -- Don't use until extremely needed
- you can use flexbox to align content inside boxes as well if you want to
- flex-flow : flex-direction flex-wrap -- this can be used to give two properties at once, pretty simple for sure